{"version":3,"sources":["intl/translate.ts","domain/support-lang.ts","comp/toggle-btn.tsx","domain/translate-repo.ts","comp/header.tsx","comp/example.tsx","comp/App.tsx","serviceWorker.ts","index.tsx"],"names":["loadIntl","lang","a","autoDetect","supportLanguages","ToggleButton","props","useState","toggle","setToggle","useEffect","onClick","useCallback","isDisable","onToggle","classes","useMemo","_classes","undefined","className","push","join","children","httpClient","basic","create","timeout","timeoutErrorMessage","getTranslate","request","config","withCredentials","headers","post","result","data","alert","console","error","Header","loadTr","event","preventDefault","loadTranslate","href","e","Example","id","downloadJsonBeautiful","file","element","document","createElement","reader","FileReader","onload","setAttribute","encodeURIComponent","name","style","display","body","appendChild","click","removeChild","readAsText","selectFile","input","type","promise","Promise","resolve","reject","onchange","target","files","App","toggledFromCode","setToggledFromCode","toggledToCodes","setToggledToCodes","tr","intl","useIntl","formatMessage","useTranslate","onToggleFromLanguage","toggled","code","fromButtons","buttons","map","it","key","unshift","toButtons","slice","filter","onToggleToLanguage","onClickSend","length","jsonFromLang","JSON","parse","fromLang","toLang","translationResponse","translation","translates","jsonBeautiful","stringify","File","log","onerror","then","catch","reason","onClickSendClasses","Boolean","window","location","hostname","match","IntlProvider","setLang","messages","setMessages","intlProviderClasses","locale","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c017263d.chunk.js","sourcesContent":["import englishTranslate from './en.json'\r\nimport {useIntl} from 'react-intl';\r\nexport type LocaleMessages = typeof englishTranslate\r\n\r\nexport type SupportedLanguages = 'en' | 'ru'\r\n\r\nexport const loadIntl = async (lang: SupportedLanguages): Promise<LocaleMessages> => {\r\n    switch (lang) {\r\n        case 'en':\r\n            return import('./en.json');\r\n        case 'ru':\r\n            return import('./ru.json');\r\n        default:\r\n            return import('./en.json');\r\n    }\r\n}\r\n\r\nexport const useTranslate = () => {\r\n    const intl = useIntl()\r\n    return (id: string) => {\r\n        return intl.formatMessage({ id: id })\r\n    }\r\n}\r\n","export const autoDetect = {\r\n    \"code\": \"\",\r\n    \"name\": \"Auto\"\r\n}\r\n\r\nexport const supportLanguages = [\r\n    {\r\n        \"code\": \"af\",\r\n        \"name\": \"Afrikaans\"\r\n    },\r\n    {\r\n        \"code\": \"am\",\r\n        \"name\": \"Amharic\"\r\n    },\r\n    {\r\n        \"code\": \"bg\",\r\n        \"name\": \"Bulgarian\"\r\n    },\r\n    {\r\n        \"code\": \"ca\",\r\n        \"name\": \"Catalan\"\r\n    },\r\n    {\r\n        \"code\": \"zh-HK\",\r\n        \"name\": \"Chinese (Hong Kong)\"\r\n    },\r\n    {\r\n        \"code\": \"zh-CN\",\r\n        \"name\": \"Chinese (PRC)\"\r\n    },\r\n    {\r\n        \"code\": \"zh-TW\",\r\n        \"name\": \"Chinese (Taiwan)\"\r\n    },\r\n    {\r\n        \"code\": \"hr\",\r\n        \"name\": \"Croatian\"\r\n    },\r\n    {\r\n        \"code\": \"cs\",\r\n        \"name\": \"Czech\"\r\n    },\r\n    {\r\n        \"code\": \"da\",\r\n        \"name\": \"Danish\"\r\n    },\r\n    {\r\n        \"code\": \"nl\",\r\n        \"name\": \"Dutch\"\r\n    },\r\n    {\r\n        \"code\": \"en-AU\",\r\n        \"name\": \"English (AU)\"\r\n    },\r\n    {\r\n        \"code\": \"en-GB\",\r\n        \"name\": \"English (UK)\"\r\n    },\r\n    {\r\n        \"code\": \"en-US\",\r\n        \"name\": \"English (US)\"\r\n    },\r\n    {\r\n        \"code\": \"et\",\r\n        \"name\": \"Estonian\"\r\n    },\r\n    {\r\n        \"code\": \"fil\",\r\n        \"name\": \"Filipino\"\r\n    },\r\n    {\r\n        \"code\": \"fi\",\r\n        \"name\": \"Finnish\"\r\n    },\r\n    {\r\n        \"code\": \"fr-CA\",\r\n        \"name\": \"French (Canada)\"\r\n    },\r\n    {\r\n        \"code\": \"fr-FR\",\r\n        \"name\": \"French (France)\"\r\n    },\r\n    {\r\n        \"code\": \"de\",\r\n        \"name\": \"German\"\r\n    },\r\n    {\r\n        \"code\": \"el\",\r\n        \"name\": \"Greek\"\r\n    },\r\n    {\r\n        \"code\": \"hi\",\r\n        \"name\": \"Hindi\"\r\n    },\r\n    {\r\n        \"code\": \"hu\",\r\n        \"name\": \"Hungarian\"\r\n    },\r\n    {\r\n        \"code\": \"id / in\",\r\n        \"name\": \"Indonesian\"\r\n    },\r\n    {\r\n        \"code\": \"it\",\r\n        \"name\": \"Italian\"\r\n    },\r\n    {\r\n        \"code\": \"ja\",\r\n        \"name\": \"Japanese\"\r\n    },\r\n    {\r\n        \"code\": \"ko\",\r\n        \"name\": \"Korean\"\r\n    },\r\n    {\r\n        \"code\": \"lv\",\r\n        \"name\": \"Latvian\"\r\n    },\r\n    {\r\n        \"code\": \"lt\",\r\n        \"name\": \"Lithuanian\"\r\n    },\r\n    {\r\n        \"code\": \"ms\",\r\n        \"name\": \"Malay\"\r\n    },\r\n    {\r\n        \"code\": \"no\",\r\n        \"name\": \"Norwegian\"\r\n    },\r\n    {\r\n        \"code\": \"pl\",\r\n        \"name\": \"Polish\"\r\n    },\r\n    {\r\n        \"code\": \"pt-BR\",\r\n        \"name\": \"Portuguese (Brazil)\"\r\n    },\r\n    {\r\n        \"code\": \"pt-PT\",\r\n        \"name\": \"Portuguese (Portugal)\"\r\n    },\r\n    {\r\n        \"code\": \"ro\",\r\n        \"name\": \"Romanian\"\r\n    },\r\n    {\r\n        \"code\": \"ru\",\r\n        \"name\": \"Russian\"\r\n    },\r\n    {\r\n        \"code\": \"sr\",\r\n        \"name\": \"Serbian\"\r\n    },\r\n    {\r\n        \"code\": \"sk\",\r\n        \"name\": \"Slovak\"\r\n    },\r\n    {\r\n        \"code\": \"sl\",\r\n        \"name\": \"Slovenian\"\r\n    },\r\n    {\r\n        \"code\": \"es-419\",\r\n        \"name\": \"Spanish (Latin America)\"\r\n    },\r\n    {\r\n        \"code\": \"es-ES\",\r\n        \"name\": \"Spanish (Spain)\"\r\n    },\r\n    {\r\n        \"code\": \"sw\",\r\n        \"name\": \"Swahili\"\r\n    },\r\n    {\r\n        \"code\": \"sv\",\r\n        \"name\": \"Swedish\"\r\n    },\r\n    {\r\n        \"code\": \"th\",\r\n        \"name\": \"Thai\"\r\n    },\r\n    {\r\n        \"code\": \"tr\",\r\n        \"name\": \"Turkish\"\r\n    },\r\n    {\r\n        \"code\": \"uk\",\r\n        \"name\": \"Ukrainian\"\r\n    },\r\n    {\r\n        \"code\": \"zu\",\r\n        \"name\": \"Zulu\"\r\n    }\r\n]\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport './toggle-btn.css'\r\n\r\ninterface Props {\r\n    className?: string\r\n    onToggle: (toggle: boolean) => void\r\n    toggle?: boolean\r\n    isDisable?: boolean\r\n}\r\n\r\nexport const ToggleButton: React.FC<Props> = (props) => {\r\n    const [toggle, setToggle] = useState(props.toggle)\r\n\r\n    useEffect(() => {\r\n        setToggle(props.toggle);\r\n    }, [props.toggle])\r\n\r\n    const onClick = useCallback(() => {\r\n        if(props.isDisable && toggle) {\r\n            return\r\n        }\r\n        props.onToggle(!toggle)\r\n        setToggle(!toggle)\r\n    }, [props, toggle])\r\n\r\n    const classes = useMemo(() => {\r\n        const _classes = []\r\n        if(props.className !== undefined) {\r\n            _classes.push(props.className)\r\n        }\r\n        if(toggle) {\r\n            _classes.push('toggled');\r\n        }\r\n        if(props.isDisable) {\r\n            _classes.push('disable')\r\n        }\r\n        return _classes\r\n    }, [props.className, props.isDisable, toggle])\r\n\r\n    return <button onClick={onClick} className={classes.join(' ')}>\r\n        {props.children}\r\n    </button>\r\n}\r\n","import basic, {AxiosRequestConfig} from 'axios';\r\n\r\nconst TIMEOUT = 100000\r\n\r\nconst httpClient = basic.create({\r\n    timeout: TIMEOUT,\r\n    timeoutErrorMessage: 'Request timeout, please try again later',\r\n})\r\n\r\nconst url = 'https://script.google.com/macros/s/AKfycbyqQy1QZK3zafaETAegLUDx1KbCgcQuphyu-UAQUI2uDyeqQKWI/exec'\r\n\r\nexport const getTranslate = async (request: TransitedRequest) => {\r\n    try {\r\n        const config: AxiosRequestConfig = {\r\n            withCredentials: false,\r\n            headers: {\r\n                \"Content-Type\": 'text/plain'\r\n            }\r\n        }\r\n        const result = await httpClient.post<TransitedResponse>(url, request, config)\r\n        return result.data\r\n    } catch (e) {\r\n        alert(`Error: ${e}`)\r\n        console.error(e)\r\n    }\r\n}\r\n\r\ninterface TransitedRequest {\r\n    fromLang: string,\r\n    toLang: string[],\r\n\r\n    data: object // example { 'keyOne': 'text', 'keyTwo': ['keyIn': 'text']}\r\n}\r\ninterface TransitedResponse {\r\n    translates: TransitedItem[]\r\n}\r\ninterface TransitedItem {\r\n    lang: string,\r\n    data: object\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport {SupportedLanguages} from '../intl/translate';\r\n\r\ninterface Props {\r\n    loadTranslate: (lang: SupportedLanguages) => void\r\n}\r\nexport const Header: React.FC<Props> = (props) => {\r\n    const loadTr = useCallback((event: React.MouseEvent, lang: SupportedLanguages) => {\r\n        event.preventDefault();\r\n        props.loadTranslate(lang)\r\n    }, [props])\r\n    return <div className={'header'}>\r\n        <div className={'lang_tab'}>\r\n            <a href=\"/\" onClick={(e)=>loadTr(e, 'en')}>en</a>\r\n            <a href=\"/\" onClick={(e)=>loadTr(e, 'ru')}>ru</a>\r\n        </div>\r\n        <div>\r\n            <a href=\"https://github.com/Ovederax/json-translate-site\">to repository</a>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport './example.css'\r\nimport {useTranslate} from '../intl/translate';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nconst exampleCodeFrom = `{\r\n    \"Translate your JSON\": \"Translate your JSON\",\r\n    \"Chose language from\": \"Chose language from\",\r\n    \"homePage\": {\r\n        \"Chose language to\": \"Chose language to\",\r\n        \"Send\": \"Send\",\r\n        \"Download\": \"Download\",\r\n        \"Chose & Send\": \"Chose & Send\"\r\n    }\r\n}`\r\nconst exampleCodeTo = `{\r\n    \"Translate your JSON\": \"Переведите ваш JSON\",\r\n    \"Chose language from\": \"Выберите язык из\",\r\n    \"homePage\": {\r\n        \"Chose language to\": \"Выберите язык для\",\r\n        \"Send\": \"Послать\",\r\n        \"Download\": \"Скачать\",\r\n        \"Chose & Send\": \"Выбрать и отправить\"\r\n    }\r\n}`\r\nexport const Example: React.FC = () => {\r\n    return (\r\n        <div className={'example'}>\r\n            <div className={'example__left'}>\r\n                <h2>\r\n                    <FormattedMessage id=\"Example in Json file:\" />\r\n                </h2>\r\n                <pre>\r\n                    {exampleCodeFrom}\r\n                </pre>\r\n            </div>\r\n            <div className={'example__right'}>\r\n                <h2>\r\n                    <FormattedMessage id=\"Example out Json file:\" />\r\n                </h2>\r\n                <pre>\r\n                    {exampleCodeTo}\r\n                </pre>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {SupportedLanguages, useTranslate} from '../intl/translate';\nimport {autoDetect, supportLanguages} from '../domain/support-lang';\nimport {ToggleButton} from './toggle-btn';\nimport {getTranslate} from '../domain/translate-repo';\nimport {Header} from './header';\nimport {Example} from './example';\n\nfunction downloadJsonBeautiful(file: File) {\n    const element = document.createElement('a');\n    const reader = new FileReader()\n    reader.onload = () => {\n        element.setAttribute('target', '_blank')\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(reader.result as string));\n        element.setAttribute('download', file.name);\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.click();\n\n        document.body.removeChild(element);\n    }\n    reader.readAsText(file)\n}\n\nconst selectFile = async () => {\n    const input = (document.createElement('input')) as HTMLInputElement\n    input.type = 'file'\n    const promise = new Promise<File[]>(((resolve, reject) => {\n        input.onchange = (event: any) => {\n            if(event !== undefined) {\n                resolve(event?.target?.files)\n            }\n            reject()\n        }\n    }))\n\n    input.click();\n    return await promise\n}\n\ninterface Props {\n    loadTranslate: (lang: SupportedLanguages) => void\n}\n\nconst App: React.FC<Props> = (props) => {\n    const [toggledFromCode, setToggledFromCode] = useState('')\n    const [toggledToCodes, setToggledToCodes] = useState([] as string[])\n    const tr = useTranslate()\n\n    useEffect(() => {\n        setToggledFromCode('')\n    }, [])\n\n    const onToggleFromLanguage = (toggled: boolean, code: string) => {\n        if (toggled) {\n            setToggledFromCode(code)\n        }\n    }\n\n    const onToggleToLanguage = (toggled: boolean, code: string) => {\n        if (toggled) {\n            toggledToCodes.push(code)\n            setToggledToCodes(toggledToCodes.slice())\n        } else {\n            setToggledToCodes(toggledToCodes.filter(it => it !== code))\n        }\n    }\n\n    const fromButtons = useMemo(() => {\n        const buttons = supportLanguages.map((it) => {\n            return <ToggleButton toggle={it.code === toggledFromCode} key={it.code} onToggle={(toggled) => {\n                onToggleFromLanguage(toggled, it.code)\n            }} className={'big-button'} isDisable={it.code === toggledFromCode}>\n                {it.name}\n            </ToggleButton>\n        })\n        buttons.unshift(\n            <ToggleButton key={autoDetect.code} onToggle={(toggled) => {\n                onToggleFromLanguage(toggled, autoDetect.code)\n            }} className={'big-button'} toggle={autoDetect.code === toggledFromCode}\n            isDisable={autoDetect.code === toggledFromCode}>\n                {autoDetect.name}\n            </ToggleButton>\n        )\n        return buttons\n    }, [toggledFromCode])\n\n\n    const toButtons = supportLanguages.map((it) => {\n        return <ToggleButton key={it.code} onToggle={(toggled) => {\n            onToggleToLanguage(toggled, it.code)\n        }} className={'big-button'}>\n            {it.name}\n        </ToggleButton>\n    })\n\n    const onClickSend = useCallback(async (event: React.MouseEvent) => {\n        event.preventDefault()\n        if (toggledToCodes.length === 0) {\n            return;\n        }\n        const files = await selectFile()\n        if (files === undefined || files.length < 1) {\n            return\n        }\n        const promise = new Promise<File>(((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsText(files[0]);\n            reader.onload = async function () {\n                if (typeof reader.result == 'string') {\n                    try {\n                        const jsonFromLang = JSON.parse(reader.result)\n                        const translationResponse = await getTranslate({\n                            fromLang: toggledFromCode,\n                            toLang: toggledToCodes,\n                            data: jsonFromLang\n                        })\n                        if(translationResponse === undefined) {\n                            reject()\n                            return;\n                        }\n\n                        let translation: undefined | object\n                        if(toggledToCodes.length === 1) {\n                            translation = translationResponse.translates[0].data\n                        } else {\n                            translation = translationResponse.translates\n                        }\n\n                        const jsonBeautiful = JSON.stringify(translation, null, 4)\n                        const file = new File([jsonBeautiful], 'out.json')\n                        resolve(file)\n                    } catch (e) {\n                        reject()\n                        console.log(e)\n                        alert('Wrong file format')\n                    }\n                }\n            };\n            reader.onerror = function () {\n                reject(reader.error)\n            };\n        }))\n\n        promise.then((result: File) => {\n            downloadJsonBeautiful(result)\n        }).catch((reason => {\n            console.log(reason);\n        }))\n    }, [toggledFromCode, toggledToCodes]);\n\n    const onClickSendClasses = useMemo(() => {\n        const classes = ['btn big-button']\n        if(toggledToCodes.length === 0) {\n            classes.push('disable')\n        }\n        return classes\n    }, [toggledToCodes]);\n\n    return (\n        <div className='container'>\n            <Header loadTranslate={props.loadTranslate} />\n            <div className='intro'>\n                <h1>\n                    {tr('Translate your JSON')}\n                </h1>\n            </div>\n\n            <div className=\"options\">\n                <div className={'options__item'}>\n                    <h2>{tr('Chose language from')}</h2>\n                    <div className=\"toggled_buttons\">\n                        {fromButtons}\n                    </div>\n                </div>\n\n                <div className={'options__item'}>\n                    <h2>{tr('Chose language to')}</h2>\n                    <div className=\"toggled_buttons\">\n                        {toButtons}\n                    </div>\n                </div>\n            </div>\n            <Example />\n            <div className={'submit'}>\n                <button className={onClickSendClasses.join(' ')} onClick={onClickSend}>{tr('Chose & Send')}</button>\n            </div>\n        </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useCallback, useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './comp/App';\nimport * as serviceWorker from './serviceWorker';\nimport {loadIntl, LocaleMessages, SupportedLanguages} from './intl/translate';\nimport { IntlProvider as ReactIntlProvider } from 'react-intl'\n\nconst IntlProvider: React.FC = () => {\n    const [lang, setLang] = useState('en' as SupportedLanguages)\n    const [messages, setMessages] = useState(undefined as LocaleMessages | undefined)\n\n    const loadTranslate = useCallback(async () => {\n        const messages = await loadIntl(lang)\n        setLang(lang)\n        setMessages(messages)\n    }, [lang, setMessages, setLang])\n\n    useEffect(() => {\n        const ignore = loadTranslate();\n    }, [setMessages, loadTranslate])\n\n    const setNewTranslate = (lang: SupportedLanguages) => {\n        setLang(lang)\n    }\n\n    const intlProviderClasses = ['ghost']\n    if(messages) {\n        intlProviderClasses.push('ghost-show')\n    }\n\n    return <div className={intlProviderClasses.join(' ')}>\n        {\n            messages?\n                ( <ReactIntlProvider messages={messages} locale={lang}>\n                        <App loadTranslate={setNewTranslate}/>\n                    </ReactIntlProvider>\n                ) : ''\n        }\n    </div>\n\n\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}